{"ast":null,"code":"const API_URL = 'http://localhost:8079/SERVICE-AUTHENTIFICATION/auth';\nexport const authService = {\n  // Connexion de l'utilisateur\n  async login(credentials) {\n    try {\n      const response = await fetch(`${API_URL}/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(credentials)\n      });\n      if (!response.ok) throw new Error('Échec de la connexion');\n      const data = await response.json();\n\n      // Sauvegarder le token JWT et les informations de l'utilisateur dans localStorage\n      localStorage.setItem('token', data.token);\n      localStorage.setItem('user', JSON.stringify(data.user));\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Déconnexion de l'utilisateur\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login'; // Rediriger vers la page de connexion\n  },\n  // Récupérer les informations de l'utilisateur courant\n  async getCurrentUser() {\n    const token = this.getToken();\n    if (!token) return null;\n    try {\n      const response = await fetch(`${API_URL}/me`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (!response.ok) throw new Error('Impossible de récupérer les détails de l\\'utilisateur');\n      return response.json();\n    } catch (error) {\n      console.error('Erreur lors de la récupération des informations de l\\'utilisateur:', error);\n      throw error;\n    }\n  },\n  // Récupérer le token JWT stocké dans localStorage\n  getToken() {\n    return localStorage.getItem('token');\n  },\n  // Vérifier si l'utilisateur est authentifié\n  isAuthenticated() {\n    return !!this.getToken();\n  }\n};","map":{"version":3,"names":["API_URL","authService","login","credentials","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","localStorage","setItem","token","user","error","logout","removeItem","window","location","href","getCurrentUser","getToken","console","getItem","isAuthenticated"],"sources":["/home/sorelle/Fontend-sale-vehicule/auto-vente/src/services/auth-service.js"],"sourcesContent":["const API_URL = 'http://localhost:8079/SERVICE-AUTHENTIFICATION/auth';\n\nexport const authService = {\n  // Connexion de l'utilisateur\n  async login(credentials) {\n    try {\n      const response = await fetch(`${API_URL}/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(credentials),\n      });\n\n      if (!response.ok) throw new Error('Échec de la connexion');\n\n      const data = await response.json();\n      \n      // Sauvegarder le token JWT et les informations de l'utilisateur dans localStorage\n      localStorage.setItem('token', data.token);\n      localStorage.setItem('user', JSON.stringify(data.user));\n\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  // Déconnexion de l'utilisateur\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login'; // Rediriger vers la page de connexion\n  },\n\n  // Récupérer les informations de l'utilisateur courant\n  async getCurrentUser() {\n    const token = this.getToken();\n    if (!token) return null;\n\n    try {\n      const response = await fetch(`${API_URL}/me`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) throw new Error('Impossible de récupérer les détails de l\\'utilisateur');\n\n      return response.json();\n    } catch (error) {\n      console.error('Erreur lors de la récupération des informations de l\\'utilisateur:', error);\n      throw error;\n    }\n  },\n\n  // Récupérer le token JWT stocké dans localStorage\n  getToken() {\n    return localStorage.getItem('token');\n  },\n\n  // Vérifier si l'utilisateur est authentifié\n  isAuthenticated() {\n    return !!this.getToken();\n  },\n};\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,qDAAqD;AAErE,OAAO,MAAMC,WAAW,GAAG;EACzB;EACA,MAAMC,KAAKA,CAACC,WAAW,EAAE;IACvB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,OAAO,QAAQ,EAAE;QAC/CM,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,WAAW;MAClC,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAE1D,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;;MAElC;MACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACI,KAAK,CAAC;MACzCF,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEP,IAAI,CAACC,SAAS,CAACG,IAAI,CAACK,IAAI,CAAC,CAAC;MAEvD,OAAOL,IAAI;IACb,CAAC,CAAC,OAAOM,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAC,MAAMA,CAAA,EAAG;IACPL,YAAY,CAACM,UAAU,CAAC,OAAO,CAAC;IAChCN,YAAY,CAACM,UAAU,CAAC,MAAM,CAAC;IAC/BC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ,CAAC,CAAC;EACnC,CAAC;EAED;EACA,MAAMC,cAAcA,CAAA,EAAG;IACrB,MAAMR,KAAK,GAAG,IAAI,CAACS,QAAQ,CAAC,CAAC;IAC7B,IAAI,CAACT,KAAK,EAAE,OAAO,IAAI;IAEvB,IAAI;MACF,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,OAAO,KAAK,EAAE;QAC5CM,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,eAAe,EAAE,UAAUU,KAAK;QAClC;MACF,CAAC,CAAC;MAEF,IAAI,CAACb,QAAQ,CAACO,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uDAAuD,CAAC;MAE1F,OAAOR,QAAQ,CAACU,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdQ,OAAO,CAACR,KAAK,CAAC,oEAAoE,EAAEA,KAAK,CAAC;MAC1F,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAO,QAAQA,CAAA,EAAG;IACT,OAAOX,YAAY,CAACa,OAAO,CAAC,OAAO,CAAC;EACtC,CAAC;EAED;EACAC,eAAeA,CAAA,EAAG;IAChB,OAAO,CAAC,CAAC,IAAI,CAACH,QAAQ,CAAC,CAAC;EAC1B;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}