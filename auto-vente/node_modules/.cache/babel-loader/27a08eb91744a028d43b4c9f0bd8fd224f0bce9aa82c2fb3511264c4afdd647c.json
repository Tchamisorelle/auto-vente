{"ast":null,"code":"var _jsxFileName = \"/home/sorelle/Fontend-sale-vehicule/auto-vente/src/components/AuthProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { login, logout, isAuthenticated, getUserRole } from '../services/auth-service';\n\n// Créer un contexte pour l'authentification\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Hook personnalisé pour accéder au contexte\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n\n// AuthProvider pour gérer l'état d'authentification et les données utilisateur\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n\n  // Récupérer les données de l'utilisateur depuis le localStorage au chargement\n  useEffect(() => {\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser)); // Charger l'utilisateur depuis localStorage\n    }\n  }, []);\n\n  // Fonction de login\n  const loginHandler = async credentials => {\n    try {\n      const userData = await login(credentials.email, credentials.password);\n      localStorage.setItem('user', JSON.stringify(userData)); // Sauvegarder l'utilisateur\n      setUser(userData); // Mettre à jour l'état utilisateur\n      return userData;\n    } catch (err) {\n      throw new Error('Email ou mot de passe incorrect');\n    }\n  };\n\n  // Fonction de logout\n  const logoutHandler = () => {\n    logout(); // Appeler logout dans AuthService pour effacer le token\n    setUser(null);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login: loginHandler,\n      logout: logoutHandler\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"5s2qRsV95gTJBmaaTh11GoxYeGE=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","login","logout","isAuthenticated","getUserRole","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","storedUser","localStorage","getItem","JSON","parse","loginHandler","credentials","userData","email","password","setItem","stringify","err","Error","logoutHandler","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/sorelle/Fontend-sale-vehicule/auto-vente/src/components/AuthProvider.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport { login, logout, isAuthenticated, getUserRole } from '../services/auth-service';\n\n// Créer un contexte pour l'authentification\nconst AuthContext = createContext();\n\n// Hook personnalisé pour accéder au contexte\nexport const useAuth = () => useContext(AuthContext);\n\n// AuthProvider pour gérer l'état d'authentification et les données utilisateur\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n\n  // Récupérer les données de l'utilisateur depuis le localStorage au chargement\n  useEffect(() => {\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser)); // Charger l'utilisateur depuis localStorage\n    }\n  }, []);\n\n  // Fonction de login\n  const loginHandler = async (credentials) => {\n    try {\n      const userData = await login(credentials.email, credentials.password); \n      localStorage.setItem('user', JSON.stringify(userData)); // Sauvegarder l'utilisateur\n      setUser(userData); // Mettre à jour l'état utilisateur\n      return userData;\n    } catch (err) {\n      throw new Error('Email ou mot de passe incorrect');\n    }\n  };\n\n  // Fonction de logout\n  const logoutHandler = () => {\n    logout(); // Appeler logout dans AuthService pour effacer le token\n    setUser(null);\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, login: loginHandler, logout: logoutHandler }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,KAAK,EAAEC,MAAM,EAAEC,eAAe,EAAEC,WAAW,QAAQ,0BAA0B;;AAEtF;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGV,aAAa,CAAC,CAAC;;AAEnC;AACA,OAAO,MAAMW,OAAO,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMV,UAAU,CAACQ,WAAW,CAAC;AAAA;;AAEpD;AAAAE,EAAA,CAFaD,OAAO;AAGpB,OAAO,MAAME,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;;EAEtC;EACAE,SAAS,CAAC,MAAM;IACd,MAAMe,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC/C,IAAIF,UAAU,EAAE;MACdD,OAAO,CAACI,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,CAAC,CAAC,CAAC;IACnC;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMK,YAAY,GAAG,MAAOC,WAAW,IAAK;IAC1C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMrB,KAAK,CAACoB,WAAW,CAACE,KAAK,EAAEF,WAAW,CAACG,QAAQ,CAAC;MACrER,YAAY,CAACS,OAAO,CAAC,MAAM,EAAEP,IAAI,CAACQ,SAAS,CAACJ,QAAQ,CAAC,CAAC,CAAC,CAAC;MACxDR,OAAO,CAACQ,QAAQ,CAAC,CAAC,CAAC;MACnB,OAAOA,QAAQ;IACjB,CAAC,CAAC,OAAOK,GAAG,EAAE;MACZ,MAAM,IAAIC,KAAK,CAAC,iCAAiC,CAAC;IACpD;EACF,CAAC;;EAED;EACA,MAAMC,aAAa,GAAGA,CAAA,KAAM;IAC1B3B,MAAM,CAAC,CAAC,CAAC,CAAC;IACVY,OAAO,CAAC,IAAI,CAAC;EACf,CAAC;EAED,oBACER,OAAA,CAACC,WAAW,CAACuB,QAAQ;IAACC,KAAK,EAAE;MAAElB,IAAI;MAAEZ,KAAK,EAAEmB,YAAY;MAAElB,MAAM,EAAE2B;IAAc,CAAE;IAAAlB,QAAA,EAC/EA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACvB,GAAA,CAlCWF,YAAY;AAAA0B,EAAA,GAAZ1B,YAAY;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}